package com.pccw.lizhihui.cmcc.data.greendao.db;

import com.pccw.lizhihui.cmcc.data.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DEPARTMENT_ENTITY".
 */
public class DepartmentEntity {

    private Long id;
    private String deptName;
    private String deptCode;
    private String parentCode;
    private String deptId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DepartmentEntityDao myDao;

    private UserEntity userEntity;
    private Long userEntity__resolvedKey;


    public DepartmentEntity() {
    }

    public DepartmentEntity(Long id) {
        this.id = id;
    }

    public DepartmentEntity(Long id, String deptName, String deptCode, String parentCode, String deptId) {
        this.id = id;
        this.deptName = deptName;
        this.deptCode = deptCode;
        this.parentCode = parentCode;
        this.deptId = deptId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDepartmentEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDeptName() {
        return deptName;
    }

    public void setDeptName(String deptName) {
        this.deptName = deptName;
    }

    public String getDeptCode() {
        return deptCode;
    }

    public void setDeptCode(String deptCode) {
        this.deptCode = deptCode;
    }

    public String getParentCode() {
        return parentCode;
    }

    public void setParentCode(String parentCode) {
        this.parentCode = parentCode;
    }

    public String getDeptId() {
        return deptId;
    }

    public void setDeptId(String deptId) {
        this.deptId = deptId;
    }

    /** To-one relationship, resolved on first access. */
    public UserEntity getUserEntity() {
        Long __key = this.departmentId;
        if (userEntity__resolvedKey == null || !userEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserEntityDao targetDao = daoSession.getUserEntityDao();
            UserEntity userEntityNew = targetDao.load(__key);
            synchronized (this) {
                userEntity = userEntityNew;
            	userEntity__resolvedKey = __key;
            }
        }
        return userEntity;
    }

    public void setUserEntity(UserEntity userEntity) {
        synchronized (this) {
            this.userEntity = userEntity;
            departmentId = userEntity == null ? null : userEntity.getId();
            userEntity__resolvedKey = departmentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
